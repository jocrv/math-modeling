Representation of integers
Representation of positive integers
The representation of positive integers in the decimal base (10) consists of a digit number (0,1,2,3,4,5,6,7,8,9), which depends on the respective position in the representation.

extension
Example
The number 179 means one (1) hundred (100) plus (+) seven (7) tens (10) and nine (9) units, or, in simplified form, using mathematical symbols: 179 = 1x102 + 7x10 + 9.

Now, let's generalize this mathematical notation. To do this, we will adopt the letter di as a representation for any decimal numeric digit, where i is the position in the number N with n+1 digits. For example, in the number 179, the decimal digit 1 is in position i=2; 7 at position i=1; and 9 at position i=0. In a form of mathematical notation, we have:
Another common notation to represent a positive integer in base 10 is (dndn-1....di...d1d0 )10. This notation leads us to another, if one wishes to represent the number with a base other than 10, which would be N=(dndn-1....di...d1d0 )b , with b being a base other than 10; consequently, we will have 0≤ di < b.


The most common bases in computational arithmetic are:

b=2
Binary

b=8
octadecimal

b=16
Hexadecimal

Note that for b=2, by definition, the possible values of d are 0 or 1; similarly, when b=8, the values they can assume are 0, 1, 2, 3, 4, 5, 6 and 7. For digits greater than 9, we adopt the letters of our alphabet, that is, A, B, C,…. In this case, for the hexadecimal base (b=16), the possible digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E and F, where A corresponds, in decimal base, to the number 10, B corresponds to 11, and so on, until F, which corresponds to 15. Let's look at some examples:

 

Changing from base b to decimal base 10 and from base 10 to base b
The conversion of a positive integer, which is found in a numerical base b to the decimal base (10), is possible by solving the following expression:


So, see the following example:

 

Generally:


Where N will have other digits in base 10, as seen in the previous examples.

To convert a positive integer N in base 10 to a base b, it is necessary to determine its respective digits: di, de (dn dn-1....di,...d1 d0 )b. To understand the procedure, we must remember the algorithm for dividing positive integers, where, when dividing a number D by a number d, a quotient q and a remainder r are obtained; and when r=0, we say that the division was exact and the remainder can only take the values of 0,1,2...d-1. Formalizing by mathematical symbols:

D=d×q+r, where 0≤ r ≤d-1

Now, let's divide N, in base 10, by the base b that we want to transform. Thus, D=N and d=b, making it necessary to find out who will be the q and the r. Remembering the principle of equality: if A=b, then B=A. We can observe that, when changing base b to base 10, we have:


Therefore, according to the principle of equality:

 

If we highlight b in the first n-1 terms of the second part of the expression, we obtain:


Comparing with D=dxq +r, we conclude that:


So, when we divide the positive integer N, in base 10, by a number b in the desired base, we obtain the remainder r equal to the last digit d0 of the N-decimal representation in base b. We know, from the previous example, that 2605 = (A2D)16, where the letter D is the last digit in the base 16 representation; in fact, when we divide 2605 by 16, the result is, as a quotient, q=162 and remainder r=13, which, in base 16 representation, is the letter D.

Therefore, the process adopted will be to divide N by b and obtain q0 and r0 = d0; then, q0 is divided by b, resulting in q1 and r1 = d1, and so on; the respective remainders will be the digits di, in base b, and the quotient of the nth and final division will be dn.

report_problem
Attention
A bit (binary digit) is defined as the basic memory element of a computer that assumes two states, which are represented by the digits zero (0) and one (1). The number of bits available for a numerical representation of positive integers corresponds to the largest integer that the computer can represent, that is, with m bits it is possible to represent 2m numbers. For example, to represent the eight decimal digits, three bits would be needed, as 23 = 8, however, to represent 10 decimal digits, four bits would be needed, as 24 = 16 configurations, which is surplus, that is, in the decimal system there are waste of bits.
Representation of negative integers

Binary

The representation of non-positive integers is carried out using the idea of the bit, that is, the representations of zero (0) or one (1) are agreed to have positive (+) or negative (-) signs. The only problem with this representation occurs in operations to obtain the numbers +0 and -0, which, although for the computer they are different numbers, we know that they are the same.

assignment_ind
Comment
There are several ways to solve this problem, but that is not the objective of this content.

Representation of real numbers
The real number 95.32, represented in decimal base (10), can be written as follows:


Now, let's generalize this idea: a real number r in base ten (10), with n+1 digits in the integer part and m digits in the fractional part, can be represented as:

 

Using the same reasoning, a real number r, represented in a base b, can be written as follows:
Change from base ten (10) to base b
To perform the change from base ten to a representation in base b of a real number in the format r = i,f; where:

i
It's the whole part.

f
It's the fractional part.

We must repair both parts, that is, make r = i + 0,f; taking 95 as an example, we have 32 = 95 +0.32. We have already seen in the previous sections the transformation of the entire part; Now, let's focus only on the fractional part 0,f. So, let's consider that our real number r only contains the fractional part:


The procedure would be, firstly, to remember that, to transform an integer in base (10) to a base b, we would have to divide the number by b, successively, and obtain the remainders. The idea will be the same, but with one difference, instead of doing divisions, we will do multiplications, that is, the first step will be to multiply the real number r by the base you want to transform, b. In mathematical symbols, we would have:


You get an integer part, d-1, and the fractional part starts with d-2. Multiplying the remaining fractional part by b, the result will be d-2, and so on. Next, we will see two examples of converting the real numbers 0.625 and 0.2 to binary base, that is, base two (2):

Example 1
0.625 x 2 = 1.250 = 1 + 0.250

0.250 x 2 = 0.500 = 0 +0.500

0.500 x 2 = 1.000 = 1 + 0.000

Therefore, (0.625)10 = (0.101)2.

Example 2
0.2 x 2 =0.4 = 0 + 0.4

0.4 x 2 = 0.8 = 0 + 0.8

0.8 x 2 = 1.6 = 1 + 0.6

0.6 x 2 =1.2 = 1 + 0.2

It starts repeating, therefore, (0,2)10 = (0.001100110011...)2.

These two examples illustrate that it is possible, in a base two transformation of a real number in base 10, to obtain a result whose representation has a finite number of zeros and ones or an infinite number (periodic decimal) of zeros and ones.

Changing from base b to base 10
Let r be a real number in base b, (0, d-1d-2....d-m )b, to obtain its representation in base 10, simply apply the mathematical formula already seen in the previous section:


For example, convert the number (0.561)8 to base 10 by applying the formula:


Scientific notation of real numbers
In science, it is common to find phenomena or quantities whose values are high or low, for example, in Astronomy or Nanotechnology. To represent these numbers, a large number of digits are required. The solution to this problem is to use scientific notation, whose representation of a real number is given as follows:


Where:

M
It is a non-negative real integer, called a mantissa.

b ≥ 2
It is a positive integer, called the base.

It is
It's called an exponent.

However, this notation has an ambiguity. The number 0.1, for example, can be represented in equivalent ways:


To resolve this situation, the following condition was imposed on the mantissa:


This condition defines a normalized notation.

Floating point representation
Scientific notation covers all real numbers and, as we know, this quantity is infinite, which makes it impossible to implement on a computer that has a finite number of digits. The solution was to slightly modify the normalization of scientific notation as follows:

Mantissa
Change to a finite number p of digits.

Exponent
Create a range for the exponent, that is, the exponent e has a minimum value (emin) and a maximum value (emax).

The notation we will use is FP(b,p, emin, emax), to refer to the number in the floating point system with base b, in which the mantissa has p digits (in base b) and the exponents are contained in the closed interval [emin, emax], that is, r=0 or r=±M×be, where b-1 ≤ M ≤ 1 - b-p.

We take as an example a real number represented in floating point FP(10,4,-99,99). It can be written generically as r=±(0,d-1 d-2 d-3 d-4)×10e, where -99≤ e ≤ 99. Note that this representation is not capable of representing the real number 0 ,1x10100, as the exponent is equal to 100 > 99, which is the maximum exponent.

report_problem
Attention
In mathematical modeling, this is called overflow. Similarly, 0.1x10-100, and the reason is the same -100<-99, which is the minimum value. This situation is defined as underflow.

video_library
Base Changes in Python
In the following video, we will cover the main commands in Python that are used to change bases.
